{"version":3,"sources":["components/MainToDo.js","App.js","index.js"],"names":["MainToDo","props","firstUserInput","input","setState","userInput","addingTask","taskList","addToList","listArray","state","list","push","localStorage","setItem","JSON","stringify","addingTaskToList","x","getItem","y","alpha","a","b","addTaskArray","addedNewTasks","filter","value","index","arr","removingInput","itemForRemoving","handleClick","e","clicked","target","id","listLS","listLSParse","parse","clickedItem","handleChangeRemove","c","item","removeItem","d","removeTask","clickedValue","console","log","filterArr","projectItems","on","temporaryStorage","nullState","clickedTask","taskClickedLS","bind","myRef","React","createRef","this","arrLS","getClickedItemName","getTasks","parseTasks","getClicked","stateNull","jointArray","forEach","array","stateNullFull","Set","first","clickedRemovedItem","window","addEventListener","className","type","onChange","placeholder","onClick","style","textDecoration","listStyleType","display","marginLeft","map","obj","href","color","key","cursor","fontSize","paddingBottom","getClickedTask","getForMatch","split","includes","document","getElementById","checked","isChecked","stringifiedClickedToArray","concat","pushClickedTasks","Component","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.24b827e1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport \"../style.css\";\r\nimport { Checkbox } from 'semantic-ui-react';\r\n\r\nclass MainToDo extends Component {\r\n    constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      userInput: '',\r\n      list: [],\r\n      clickedItem: [],\r\n      taskList: '',\r\n      projectItems: [],\r\n      addedNewTasks: [],\r\n      on: false,\r\n      temporaryStorage: [],\r\n      nullState: [],\r\n      itemForRemoving: '',\r\n      clickedTask: [],\r\n      taskClickedLS: []\r\n    }\r\n  this.handleChangeRemove = this.handleChangeRemove.bind(this);\r\n  this.myRef = React.createRef();\r\n  }\r\n  firstUserInput = (input) => {\r\n    this.setState({\r\n        userInput: input\r\n    });\r\n  }\r\n  \r\n  addingTask = (input) => {\r\n      this.setState({\r\n          taskList: input\r\n      })\r\n  }\r\n\r\n  addToList = (input) => {\r\n      let listArray = this.state.list;\r\n      listArray.push(input);\r\n\r\n      localStorage.setItem('listLS', JSON.stringify(this.state.list));\r\n    // addedNewTasks is full array\r\n      this.setState({\r\n          list: listArray,\r\n          userInput: '',\r\n      //    addedNewTasks: []\r\n      })\r\n  }\r\n  \r\n  addingTaskToList = (input) => {\r\n    let x = localStorage.getItem('clickedItem');\r\n    let y = x;\r\n    let alpha = this.state.taskList;\r\n\r\n    let a = localStorage.getItem('clickedItem');\r\n    let b = localStorage.getItem(a);\r\n\r\n    localStorage.setItem('shadowedTasks', b);\r\n    localStorage.setItem(y, JSON.stringify(alpha));\r\n    let addTaskArray = this.state.addedNewTasks;\r\n    addTaskArray.push(input); \r\n     this.setState({\r\n        addedNewTasks: addTaskArray, \r\n         taskList: ''\r\n     }) \r\n     localStorage.setItem(x, JSON.stringify(this.state.addedNewTasks.\r\n        filter(function (value, index, arr) {\r\n            return value !== \"null\"})\r\n            ));  \r\n        }\r\n\r\nremovingInput = (input) => {\r\n    this.setState({\r\n        itemForRemoving: input\r\n    })\r\n}\r\n\r\n   componentDidMount() {\r\n       if(localStorage.getItem('listLS') === null) { \r\n                this.setState({\r\n                    list: []\r\n                })\r\n            } else {\r\n                let arrLS = localStorage.getItem('listLS');\r\n                let parse = JSON.parse(arrLS);\r\n\r\n                this.setState({\r\n                      list: parse\r\n                })\r\n        }\r\n\r\n        if(localStorage.getItem('clickedItem') === null) {\r\n            this.setState({\r\n                addedNewTasks: []\r\n            })\r\n         } else {\r\n                let getClickedItemName = localStorage.getItem('clickedItem');\r\n                let getTasks = localStorage.getItem(getClickedItemName); \r\n                let parseTasks = JSON.parse(getTasks);\r\n\r\n                this.setState({\r\n                    addedNewTasks: parseTasks\r\n                });\r\n\r\n                localStorage.setItem('shadowedTasks', getTasks); \r\n        } \r\n        const getClicked = localStorage.getItem('clickedItem');\r\n       if(localStorage.getItem(getClicked + 'Clicked' + 'LS') !== false) {\r\n            \r\n     this.setState({\r\n         taskClickedLS: localStorage.getItem(getClicked + 'Clicked' + 'LS')\r\n     }) \r\n    }  \r\n\r\n  /*      let clickedTaskArrayNewState = clickedTaskArray.concat(this.state.clickedTask);\r\n        this.setState({\r\n            clickedTask: clickedTaskArrayNewState\r\n        })\r\n        \r\n\r\n        console.log(this.state.clickedTask); */\r\n    } \r\n    \r\n    componentDidUpdate() {\r\n        if(localStorage.getItem('shadowedTasks') !== null && localStorage.getItem('clickedItem') !== null) {\r\n        let a = localStorage.getItem('clickedItem');\r\n        let b = localStorage.getItem(a);\r\n        let c = localStorage.getItem('shadowedTasks');\r\n\r\n                let getTasks = localStorage.getItem([a]);\r\n                let combine = [getTasks||[], c||[]];\r\n                const stateNull = combine.filter(function (value, index, arr) {\r\n                         return value !== \"null\"\r\n                 });\r\n                    \r\n                     let jointArray = [];\r\n\r\n                     stateNull.forEach(array => {\r\n                        jointArray = [...jointArray, array] \r\n                     })\r\n                     const stateNullFull = [...new Set([...jointArray])];\r\n                     const [first, ...rest] = stateNullFull;\r\n                     \r\n                localStorage.setItem(a, first);\r\n                localStorage.removeItem('shadowedTasks'); \r\n                \r\n                this.setState({\r\n                         addedNewTasks: JSON.parse(b)\r\n                    })\r\n        }\r\n        let clickedRemovedItem = localStorage.getItem('clickedItem');\r\n        localStorage.setItem(clickedRemovedItem, JSON.stringify(this.state.addedNewTasks))\r\n        \r\n        const getClicked = localStorage.getItem('clickedItem');\r\n        if(this.state.clickedTask !== []) {\r\n            localStorage.setItem(getClicked + 'Clicked' + 'LS', this.state.clickedTask)\r\n     }\r\n} \r\n\r\n  componentWillUnmount() {\r\n      window.addEventListener('beforeunload', function(e) {\r\n          return localStorage.push(this.state.list);\r\n      })\r\n      window.addEventListener('onload', function() {\r\n            return this.setState({\r\n                addedNewTasks: []\r\n            })\r\n      })\r\n  }\r\n  \r\n  handleClick = e => { //if clicked item is not state value\r\n      let clicked = e.target.id; \r\n      let listLS = localStorage.getItem('listLS');\r\n      let listLSParse = JSON.parse(listLS);\r\n      localStorage.setItem('clickedItem', listLSParse[clicked]);\r\n      let a = localStorage.getItem('clickedItem');\r\n      let b = localStorage.getItem(a);\r\n\r\n      this.setState({\r\n        clickedItem: localStorage.getItem('clickedItem')\r\n      });\r\n      (b !== null) ? \r\n        this.setState({ \r\n            addedNewTasks: JSON.parse(b)\r\n        }) :\r\n        this.setState({addedNewTasks: [\"null\"]});\r\n  }\r\n    \r\n  handleChangeRemove = e => {\r\n      let a = localStorage.getItem('listLS');\r\n      let b = JSON.parse(a);\r\n      let c = b.filter(item => item !== e);\r\n\r\n      localStorage.setItem('listLS', JSON.stringify(c));\r\n      this.setState({\r\n          itemForRemoving: ''\r\n      })\r\n      localStorage.removeItem(e);\r\n      let d = this.state.list.filter(item => item !== e)\r\n      this.setState({\r\n          list: d\r\n      })\r\n    }\r\n\r\n    removeTask = (clickedValue) => {\r\n        console.log(this.state.addedNewTasks);\r\n        console.log(clickedValue);\r\n        let stateArr = this.state.addedNewTasks;\r\n        let filterArr = stateArr.filter(item => item !== clickedValue);\r\n            this.setState({\r\n                addedNewTasks: filterArr\r\n            })\r\n    }\r\n    render() {\r\n            \r\n        return (\r\n                <div className=\"ui container\">\r\n                    <div className=\"ui horizontal segments\">\r\n                        <div className=\"ui left floated segment\">\r\n                            <h2 className=\"ui basic segment\">Add project</h2>\r\n                        <div className=\"ui action input\">\r\n                        <input className=\"margin\" type=\"text\" \r\n                            onChange={(e) => this.firstUserInput(e.target.value)}\r\n                            value={this.state.userInput}  \r\n                            placeholder=\"Add Project\" />\r\n                        <button className=\"ui primary button\" onClick={() => this.addToList(this.state.userInput)}>Add</button>\r\n                        </div>\r\n                        </div>\r\n                        <div className=\"ui right floated segment\">\r\n                            <h2 className=\"ui basic segment\">Remove project</h2>\r\n                            <div className=\"ui action input\">\r\n                            <input className=\"margin floatright\" type=\"text\"\r\n                                onChange={(e) => this.removingInput(e.target.value)}\r\n                                value={this.state.itemForRemoving}\r\n                                placeholder=\"Delete Project\" />\r\n                            <button className=\"ui negative button\" onClick={() => this.handleChangeRemove(this.state.itemForRemoving)}>Remove</button>\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"ui segment\">\r\n                        <h2 className=\"ui center aligned icon header\">\r\n                        <i className=\"clipboard list icon\"></i>\r\n                            Projects\r\n                        </h2>\r\n                        <div className=\"ui center aligned segment\">\r\n                            <ul style={{textDecoration: 'none', listStyleType: 'none', display: 'inline-block', marginLeft: \"-33px\"}}>\r\n                                {this.state.list.map((obj, id) => \r\n                                    <a href=\"#task-segment\" style={{color: 'inherit'}}><li key={obj[id]} id={id}\r\n                                    onClick={\r\n                                        this.handleClick\r\n                                    }\r\n                                    style={{cursor: 'pointer', fontSize: '20px', paddingBottom: '5px'}}>\r\n                                        {obj}\r\n                                    </li></a>\r\n                                )} \r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"task-segment\" className=\"ui horizontal segments\">\r\n                        <div className=\"ui center aligned segment\">\r\n                        <h2 className=\"ui center aligned icon header\">\r\n                            {this.state.clickedItem} \r\n                        </h2>\r\n                        <div className=\"ui action input\">\r\n                            <input  type=\"text\"\r\n                                    onChange={(e) => this.addingTask(e.target.value)}\r\n                                    value={this.state.taskList} \r\n                            placeholder=\"Enter Task\" /> \r\n                            <button className=\"ui button\" onClick={() => this.addingTaskToList(this.state.taskList)}>Add Task</button> \r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                    <div className=\"middle aligned divided list\">\r\n                        <div className=\"item\">\r\n                            \r\n                            <div className=\"content\">\r\n                                \r\n                                {localStorage.getItem(localStorage.getItem('clickedItem')) !== null && <ul style={{textDecoration: 'none', listStyleType:'none'}}>\r\n                                    {this.state.addedNewTasks\r\n                                        .filter(function (value, index, arr) {\r\n                                            return value !== \"null\"})\r\n                                        .map((obj, id) => \r\n                                    <li style={{ paddingBottom: '17px'}} key={obj[id]} id={id}>\r\n                                        <label><input type=\"checkbox\" id={obj[id]} onClick={() => {\r\n                                            let getClickedTask = localStorage.getItem('clickedItem');\r\n                                            let getForMatch = localStorage.getItem(getClickedTask + 'Clicked' + 'LS');\r\n                                            console.log(JSON.stringify(obj), getForMatch.split(', '));\r\n                                            if(getForMatch.includes(JSON.stringify(obj))) {\r\n                                                console.log('its true')\r\n                                                document.getElementById(obj[id]).checked = true;\r\n                                            }\r\n                                            let checkedIS = document.getElementById(obj[id]);\r\n                                            let isChecked = checkedIS.checked; //true or false\r\n                                            const getClicked = localStorage.getItem('clickedItem');\r\n                                            if(isChecked === true) {\r\n                                                 //Simone\r\n                                                localStorage.setItem(getClicked + 'Clicked', (obj)); //set simOne value \r\n                                                let x = localStorage.getItem(getClicked + 'Clicked'); // get simOne\r\n                                                const stringifiedClicked = JSON.stringify(x);\r\n                                                const stringifiedClickedToArray = [stringifiedClicked].concat(this.state.clickedTask);\r\n                                                const settingStateTasks = () => this.setState({\r\n                                                    clickedTask: stringifiedClickedToArray\r\n                                                })\r\n                                                settingStateTasks();\r\n                                                console.log(this.state.clickedTask);\r\n                                                if(this.state.clickedTask !== []) {\r\n                                                localStorage.setItem(getClicked + 'Clicked' + 'LS', this.state.clickedTask)\r\n                                                }\r\n\r\n                                                console.log(this.state.pushClickedTasks);\r\n                                            }\r\n                                          //  localStorage.setItem(getClicked + 'Clicked' + 'LS', this.state.taskClickedLS) \r\n                                            }} />{obj}</label> \r\n                                        <button \r\n                                        onClick={() => this.removeTask(obj)} \r\n                                        className=\"ui right floated button\">\r\n                                            remove\r\n                                        </button> \r\n                                    </li>\r\n                                    )}                 \r\n                                </ul>}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainToDo;","import React from 'react';\nimport MainToDo from './components/MainToDo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainToDo />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}